name: 'Terraform CI'

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-west-1
  TERRATEST_VERSION: v0.46.4  # Pinned version for consistency
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

# Prevent multiple runs from interfering with each other
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        working-directory: .

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.7.5

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install tflint
      run: |
        curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
        tflint --version

    - name: Run tflint
      run: |
        tflint --init
        tflint --recursive

    - name: Run tfsec
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        working_directory: .
        version: latest
        format: default
        additional_args: --no-color

    - name: Run checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: terraform
        check: CKV_AWS_*

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'
        check-latest: true
        cache: true
        cache-dependency-path: |
          test/go.mod
          test/go.sum

    - name: Setup Test Dependencies
      run: |
        cd test
        echo "Updating go.mod with pinned Terratest version..."
        go get github.com/gruntwork-io/terratest@${{ env.TERRATEST_VERSION }}
        echo "Running go mod tidy..."
        go mod tidy
        echo "Downloading dependencies..."
        go mod download
        echo "Verifying dependencies..."
        go mod verify

    - name: Terraform Format
      id: fmt
      run: |
        echo "Checking root directory format..."
        terraform fmt -check
        echo "Checking EC2 module format..."
        terraform fmt -check modules/ec2

    - name: Terraform Init
      id: init
      run: |
        echo "Initializing root directory..."
        terraform init
        echo "Initializing EC2 module..."
        cd modules/ec2 && terraform init

    - name: Terraform Validate
      id: validate
      run: |
        echo "Validating root directory..."
        terraform validate
        echo "Validating EC2 module..."
        cd modules/ec2 && terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        echo "Planning root directory..."
        terraform plan -no-color
        echo "Planning EC2 module..."
        cd modules/ec2 && terraform plan -no-color

    - name: Run Tests
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
      run: |
        cd test
        echo "Running tests with timeout of 30 minutes..."
        go test -v -timeout 30m -count=1

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "Applying Terraform configuration..."
        terraform apply -auto-approve

    - name: Terraform Output
      if: steps.plan.outcome == 'success'
      run: |
        echo "Terraform Output:"
        terraform output
