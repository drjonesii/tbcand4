name: Destroy Infrastructure

on:
  workflow_dispatch:  # Allows manual triggering of the workflow
    inputs:
      environment:
        description: 'Environment to destroy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      confirmation:
        description: 'Type "DESTROY" to confirm'
        required: true
        type: string

# Prevent multiple runs from interfering with each other
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read
  issues: write  # Needed for creating GitHub issue comments

env:
  AWS_REGION: us-west-1

jobs:
  verify:
    name: Verify Destruction Request
    runs-on: ubuntu-latest
    steps:
      - name: Check confirmation
        if: github.event.inputs.confirmation != 'DESTROY'
        run: |
          echo "Invalid confirmation. Expected 'DESTROY', got '${{ github.event.inputs.confirmation }}'"
          exit 1

      - name: Check environment protection
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "prod" ]]; then
            echo "‚ö†Ô∏è WARNING: You are about to destroy PRODUCTION infrastructure! ‚ö†Ô∏è"
            echo "This action requires additional approval from repository administrators."
            exit 1
          fi

      - name: Check IP restrictions
        run: |
          # Get the runner's IP address
          RUNNER_IP=$(curl -s https://api.ipify.org)
          # Get allowed IPs from environment secrets
          ALLOWED_IPS="${{ secrets.ALLOWED_IPS }}"
          
          if [[ ! $ALLOWED_IPS =~ $RUNNER_IP ]]; then
            echo "‚ùå IP $RUNNER_IP is not in the allowed list: $ALLOWED_IPS"
            exit 1
          fi
          echo "‚úÖ IP $RUNNER_IP is allowed to proceed"

  destroy:
    name: Destroy Infrastructure
    needs: verify
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: ${{ github.event.inputs.environment }}
    defaults:
      run:
        working-directory: .
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify AWS Authentication Prerequisites
        run: |
          if [ -z "${{ secrets.AWS_ACCOUNT_ID }}" ]; then
            echo "‚ùå Error: AWS_ACCOUNT_ID secret is not set"
            exit 1
          fi

      - name: Configure AWS Credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/turbot-candidate4-github-oidc-role
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 900

      - name: Verify AWS Authentication
        run: |
          # Verify AWS credentials
          if ! aws sts get-caller-identity &>/dev/null; then
            echo "‚ùå Error: Failed to authenticate with AWS"
            exit 1
          fi
          
          # Display assumed identity
          echo "üîç Running as:"
          aws sts get-caller-identity

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.5"

      - name: Terraform Init
        run: terraform init

      - name: Terraform Workspace Select
        run: terraform workspace select ${{ github.event.inputs.environment }} || terraform workspace new ${{ github.event.inputs.environment }}

      - name: List Resources to be Destroyed
        run: |
          echo "The following resources will be destroyed:"
          terraform state list
          echo "Waiting 30 seconds before proceeding..."
          sleep 30

      - name: Terraform Destroy
        run: |
          terraform destroy -auto-approve
        env:
          TF_VAR_environment: ${{ github.event.inputs.environment }}

      - name: Cleanup Workspace
        if: always()
        run: |
          terraform workspace select default
          terraform workspace delete ${{ github.event.inputs.environment }} || true

      - name: Notify on Completion
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const environment = '${{ github.event.inputs.environment }}';
            const status = '${{ job.status }}';
            const actor = '${{ github.actor }}';
            const timestamp = new Date().toISOString();
            
            const githubMessage = status === 'success' 
              ? `‚úÖ Infrastructure in ${environment} environment has been destroyed successfully.`
              : `‚ùå Failed to destroy infrastructure in ${environment} environment.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: githubMessage
            }); 